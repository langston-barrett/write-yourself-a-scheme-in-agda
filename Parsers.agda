module Parsers where

open import Agda.Builtin.Char                   using (primIsSpace)
open import Category.Monad                      using (RawMonadPlus)
open import Data.Bool               as Bool     using  (not ; if_then_else_ ; _‚à®_)
open import Data.Char               as Char
open import Data.List               as List     hiding ([_] ; _++_)
open import Data.List.NonEmpty      as NonEmpty using (List‚Å∫ ; toList)
open import Data.List.Sized         as Sized    hiding (list; map)
open import Data.List.Sized.Interface           using (Sized)
open import Data.Maybe              as Maybe
open import Data.Nat.Properties                 using (n‚â§1+n)
open import Data.Product                        using (_√ó_ ; proj‚ÇÅ ; proj‚ÇÇ)
open import Data.String             as String   using (String ; toList ; _++_)
open import Data.Sum                as Sum      using (_‚äé_ ; inj‚ÇÅ ; inj‚ÇÇ)
open import Function                            using (_$_ ; _‚àò_ ; id ; const)
open import Induction.Nat.Strong    as Strong   using (fix ; ‚ñ°_ ; extract)
open import Level                               using (zero)
open import Relation.Unary.Indexed              using ([_] ; _‚ü∂_)
open import Size
open import Text.Parser.Char
open import Text.Parser.Combinators
open import Text.Parser.Numbers                 using (decimal‚Ñ§)
open import Text.Parser.Success     as Success

open import Error
open import Language as Language hiding (atom ; integer ; list ; quoted ; string)

-- ----------------- UTIL

instance eqChar = Char._‚âü_

instance
  plusMaybe : RawMonadPlus {zero} Maybe
  plusMaybe = Maybe.monadPlus

  plusList : RawMonadPlus {zero} List.List
  plusList = List.monadPlus

-- Just a version of runParser specialized to strings
parseit! : {A B : Set} {M : Set ‚Üí Set}
         ‚Üí [ Parser A (‚à£List Char ‚à£‚â°_) M B ]
         ‚Üí (str : String)
         ‚Üí M (Success A (‚à£List Char ‚à£‚â°_) B (List.length (String.toList str)))
parseit! parser str =
  runParser parser (n‚â§1+n _) (Sized.fromList (String.toList str))

-- ----------------- COMBINATORS

module _ {M : Set ‚Üí Set} {{ùïÑ : RawMonadPlus M}} where
  many : [ Parser Char (‚à£List Char ‚à£‚â°_) M Char ]
        ‚Üí [ Parser Char (‚à£List Char ‚à£‚â°_) M String ]
  many parser = String.fromList <$> NonEmpty.toList <$> list‚Å∫ parser

-- TODO: add to combinators?

module _ {Tok : Set} {Toks : _} {{ùïä : Sized Tok Toks}}
    {M : Set ‚Üí Set} {{ùïÑ : RawMonadPlus M}} where

  module _ {A B : Set} where
    sepBy : [ Parser Tok Toks M A ‚ü∂ ‚ñ° Parser Tok Toks M B
            ‚ü∂ Parser Tok Toks M (List‚Å∫ A) ]
    sepBy pA pB = list‚Å∫ (pA <&? pB)

  -- TODO: https://github.com/agda/agda-stdlib/issues/220#issuecomment-360480024
  -- except : List Tok ‚Üí [ Parser Tok Toks M Char ]
  -- except toks = guard (Œª c ‚Üí not ‚àà toks) anyTok
  --   where
  --     _‚àà_ : ‚àÄ {l} {A : Set l} ‚Üí A ‚Üí (Decidable {A = A} (Œª y ‚Üí x ‚â° y)) ‚Üí A ‚Üí Bool
  --     _‚àà_ {_} {_} {dec} x xs = ‚åä any dec (Œª y ‚Üí y ‚â° x) ‚åã

-- ----------------- SIMPLE

-- Valid symbols to begin identifiers
symbol : [ Parser Char (‚à£List Char ‚à£‚â°_) Maybe Char ]
symbol = anyOf $ String.toList "‚äì‚äî‚â§!#$%&|*+-/:<=>?@^_~"
 
-- Anything that isn't a whitespace character
not-space : [ Parser Char (‚à£List Char ‚à£‚â°_) Maybe Char ]
not-space = guard (Œª c ‚Üí not (primIsSpace c)) anyTok

-- Anything that isn't a whitespace character
not-space-or-paren : [ Parser Char (‚à£List Char ‚à£‚â°_) Maybe Char ]
not-space-or-paren = guard (Œª c ‚Üí (not (primIsSpace c)) ‚à® (c == ')')) anyTok

-- A parser wedged between two characters, like "", [], (), {}, ``, etc.
between-chars : ‚àÄ {A} ‚Üí Char ‚Üí Char ‚Üí [ ‚ñ° Parser Char (‚à£List Char ‚à£‚â°_) Maybe A
                                      ‚ü∂ Parser Char _ Maybe A ]
between-chars c‚ÇÅ c‚ÇÇ = between (exact c‚ÇÅ) (box $ exact c‚ÇÇ)

-- Something between quote marks
between-quotes : ‚àÄ {A} ‚Üí [ ‚ñ° Parser _ _ _ A ‚ü∂ Parser _ _ _ A ]
between-quotes = between-chars '"' '"'

-- Something between parentheses
between-parens : ‚àÄ {A} ‚Üí [ ‚ñ° Parser _ _ _ A ‚ü∂ Parser _ _ _ A ]
between-parens = between-chars '(' ')'

-- ----------------- SPECIALIZED

string : [ Parser Char (‚à£List Char ‚à£‚â°_) Maybe Lisp ]
string =
  fix (Parser _ _ _ _) $
    Œª rec ‚Üí Lisp.string <$> between-quotes (box valid-string)
  where
    -- A valid string is anything not containing a double quote
    valid-string : [ Parser Char (‚à£List Char ‚à£‚â°_) Maybe String ]
    valid-string = many (guard (Œª c ‚Üí not (c == '"')) anyTok)

atom : [ Parser Char (‚à£List Char ‚à£‚â°_) Maybe Lisp ]
atom =
  fix (Parser Char (‚à£List Char ‚à£‚â°_) Maybe Lisp) $
    Œª rec ‚Üí (Œª (str : String) ‚Üí
               if      (String._==_ str "true")  then Lisp.bool Bool.true
               else if (String._==_ str "false") then Lisp.bool Bool.false
               else                                   Lisp.atom str) <$>
                 head&tail <$> pair
  where
    -- The head of an identifier must be a letter or symbol, after that,
    -- anything (non-whitespace) goes.
    pair : [ Parser Char (‚à£List Char ‚à£‚â°_) Maybe (Char √ó Maybe String) ]
    pair = (alpha <|> symbol) &?>>= (const $ box $ many (alpha <|> symbol))
    -- Combine the output of pair into a string
    head&tail : (Char √ó Maybe String) ‚Üí String
    head&tail pair =
      String.fromList (proj‚ÇÅ pair ‚à∑ []) ++ (maybe‚Ä≤ id "" $ proj‚ÇÇ pair)

integer : [ Parser Char (‚à£List Char ‚à£‚â°_) Maybe Lisp ]
integer = Language.integer <$> decimal‚Ñ§

-- Basic, unquoted, non-list expressions
base-expr : [ Parser Char (‚à£List Char ‚à£‚â°_) Maybe Lisp ]
base-expr = integer <|> string <|> atom

-- The above, with possible quotation
maybe-quoted : [ Parser Char (‚à£List Char ‚à£‚â°_) Maybe Lisp ]
maybe-quoted = base-expr <|> Lisp.quoted <$> (exact '\'' &> (box base-expr))

expr : [ Parser Char (‚à£List Char ‚à£‚â°_) Maybe Lisp ]
expr = fix (Parser Char (‚à£List Char ‚à£‚â°_) Maybe Lisp) $ Œª rec ‚Üí
  maybe-quoted
  <|> Lisp.list <$> between-parens (Strong.map (Œª p ‚Üí sepBy p (box spaces)) rec)

-- The main external interface
parse : String ‚Üí errorOr Lisp
parse str =
  Sum.map err-parse (Success.value) $ maybe-to-either·µ£ str (parseit! expr str)
  where maybe-to-either·µ£ : ‚àÄ {A B} ‚Üí B ‚Üí Maybe A ‚Üí B ‚äé A
        maybe-to-either·µ£ default = maybe‚Ä≤ inj‚ÇÇ (inj‚ÇÅ default)
